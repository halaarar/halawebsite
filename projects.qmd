# My Projects
Welcome to a summary of some of my most exciting projects! Each one represents a unique application of data science, machine learning, and analytics to solve real-world problems. Click on the links to explore the full project details and GitHub repositories.


## Health Science Calculator

Health Science Calculator is a Python package designed to provide accurate and efficient health metric calculations. It supports Total Daily Energy Expenditure (TDEE), Basal Metabolic Rate (BMR), and Body Mass Index (BMI) computations, making it useful for health professionals, researchers, and fitness enthusiasts.

This project was developed as part of a collaborative effort using best practices in software engineering, automation, and version control to ensure code quality, maintainability, and scalability.

### Project Goals & Contributions
✔ Developed a modular Python package for health-related calculations using object-oriented programming (OOP) principles.
✔ Implemented core functions to compute BMI, BMR, TDEE, and perform unit conversions to standardize health data.
✔ Integrated Pytest for automated testing, ensuring the accuracy of implemented functions and maintaining 100% test coverage.
✔ Leveraged GitHub Actions for CI/CD, automating testing, deployment, and ensuring seamless version control.
✔ Published the package to PyPI, making it accessible for installation and use via pip install healthsciencecalculator.
✔ Collaborated with a team, applying version control workflows (branching, merging, pull requests) to streamline development.
✔ Designed an API reference and technical documentation using Sphinx and Read the Docs, ensuring clarity for users.

Technical Implementation
1️⃣ Core Functionality
The package provides key health-related calculations:

📌 get_tdee() – Calculates Total Daily Energy Expenditure (TDEE) based on BMR and activity level.
📌 get_bmi() – Computes Body Mass Index (BMI) and classifies users into categories (underweight, normal, overweight, obese).
📌 get_bmr() – Uses the Harris-Benedict equation to compute Basal Metabolic Rate (BMR) based on weight, height, age, and sex.
📌 unit_convert() – Converts between metric and imperial units for weight, height, temperature, and volume.

💡 Each function is rigorously tested and optimized to provide high-accuracy calculations.

2️⃣ Continuous Integration & Deployment (CI/CD)
To ensure code stability and reliability, I implemented GitHub Actions for CI/CD, enabling:

✔ Automated testing via Pytest after every code commit or pull request.
✔ Linting and style checks using Pylint to maintain code consistency.
✔ Test coverage reporting using pytest-cov and Codecov for tracking improvements.
✔ Automated package deployment to PyPI using GitHub Actions, ensuring seamless updates.

🔹 CI/CD Workflow Overview:

Push or Pull Request: Triggers automated tests on GitHub Actions.
Run Pytest: Tests all functions for expected outputs, error handling, and edge cases.
Deploy to PyPI: If all tests pass, the package is automatically updated on PyPI.
💡 Impact: CI/CD ensures code quality, early bug detection, and smooth integration into production.

3️⃣ Automated Testing with Pytest
Testing is crucial in health applications, so I implemented comprehensive unit tests using Pytest:

✔ Validated all health metric calculations against known industry standards.
✔ Implemented edge-case handling (e.g., division by zero, incorrect input types).
✔ Ran parameterized tests to ensure correctness across various inputs.
✔ Tracked test coverage using pytest-cov, achieving 100% test coverage.

💡 Testing Commands:

bash
Copy
Edit
# Run all tests
pytest  

# Run tests with coverage report
pytest --cov=healthsciencecalculator
4️⃣ Collaboration & Version Control
Working on this project in a team required effective version control:

✔ Used GitHub for repository management, implementing branching strategies and pull requests.
✔ Code reviews were conducted for all new features, ensuring high-quality contributions.
✔ Maintained a changelog to document package updates and feature improvements.

Installation & Usage
📌 Install the package via pip:

bash
Copy
Edit
pip install healthsciencecalculator
📌 Example Usage:

python
Copy
Edit
from healthsciencecalculator import get_bmi, get_tdee

# Calculate BMI
bmi_result = get_bmi(weight=70, height=1.75)
print(f"BMI: {bmi_result.bmi:.2f}, Category: {bmi_result.category}")

# Calculate TDEE
tdee = get_tdee(bmr=1500, activity_level="moderately active")
print(f"TDEE: {tdee:.2f} kcal/day")
Key Takeaways & Impact
🚀 Developing a robust Python package strengthened my skills in:
✔ Software Development – Object-oriented programming, modular design, API development.
✔ Machine Learning & Analytics – Data validation, unit conversions, structured data processing.
✔ Automation & CI/CD – GitHub Actions, Pytest, automated package deployment.
✔ Team Collaboration – Git workflows, issue tracking, and effective code documentation.
✔ Technical Communication – Writing clear documentation and API references for user accessibility.

This project enhanced my ability to develop scalable, well-tested software solutions, a skill directly applicable to data engineering, AI, and healthcare analytics roles.




## Bank Marketing predictions 
Overview
The Bank Marketing Prediction Project applies machine learning techniques to enhance bank marketing strategies by predicting whether a customer will subscribe to a term deposit based on demographic and campaign-related data.

The goal was to develop a predictive model that helps banks optimize resource allocation, minimize marketing costs, and improve customer conversion rates. This project incorporated end-to-end data science workflows, data preprocessing, and model evaluation to identify the most effective approach for targeted marketing.

💡 Key Contributions & Impact
✔ Developed predictive models to classify customer responses to bank marketing campaigns.
✔ Built a fully reproducible machine learning pipeline using Python and Jupyter Notebooks.
✔ Implemented Docker for containerized deployment, ensuring portability across environments.
✔ Used GitHub Actions for CI/CD, automating testing and workflow execution.
✔ Applied statistical analysis and feature engineering to optimize model performance.
✔ Conducted error analysis and class imbalance handling to enhance predictions.
✔ Created a structured reporting system, generating a detailed analysis of the models’ effectiveness.

Project Objectives
🔹 Predict Customer Subscription Behavior: Determine whether a customer will subscribe to a term deposit based on demographic and campaign-related data.
🔹 Optimize Marketing Strategies: Identify patterns in customer responses to improve targeting and reduce costs.
🔹 Automate Data Processing & Model Training: Develop a scalable pipeline using Click, Docker, and Makefiles.
🔹 Enhance Model Interpretability: Implement feature importance analysis to guide data-driven decision-making.

Technical Implementation
1️⃣ Data Preprocessing & Feature Engineering
Processing raw customer data involved several key steps:
✔ Handled missing values and inconsistencies using pandas and NumPy.
✔ Applied feature scaling and normalization for numerical attributes.
✔ Used one-hot encoding to convert categorical variables into a machine-readable format.
✔ Class balancing techniques (oversampling, undersampling) to address the imbalance between subscribers and non-subscribers.

Example Code for Data Cleaning & Feature Engineering:

python
Copy
Edit
from sklearn.preprocessing import StandardScaler, OneHotEncoder
import pandas as pd

# Load dataset
df = pd.read_csv("data/bank-additional-full.csv")

# Feature scaling
scaler = StandardScaler()
df[["age", "campaign", "previous"]] = scaler.fit_transform(df[["age", "campaign", "previous"]])

# One-hot encoding categorical features
encoder = OneHotEncoder()
encoded_features = encoder.fit_transform(df[["job", "marital", "education"]]).toarray()
2️⃣ Machine Learning Models & Performance Evaluation
Implemented two machine learning models:

📌 Logistic Regression

Focused on interpretability and explainability.
Prioritized minimizing false positives, achieving high precision (0.70).
Used L1 regularization to prevent overfitting.
📌 Decision Tree Classifier

More flexible in handling non-linear relationships.
Achieved higher recall (0.23) but increased false positives.
Required pruning and hyperparameter tuning for optimal performance.
✔ Performance Metrics Used:

Accuracy: Measures overall correctness.
Precision: Reduces false positives (important for targeted marketing).
Recall: Identifies more actual subscribers.
F1 Score: Balances precision and recall.
Model Performance Results:

Model	Accuracy	Precision	Recall	F1 Score
Logistic Regression	88.5%	0.70	0.20	0.31
Decision Tree	89.7%	0.64	0.23	0.34
💡 Findings:

Logistic Regression was best for reducing false positives.
Decision Tree performed better in identifying actual subscribers.
Further model tuning needed to balance precision and recall.
3️⃣ CI/CD & Automation with Docker & GitHub Actions
To ensure reproducibility and scalability, I implemented CI/CD pipelines using Docker & GitHub Actions.

✔ Dockerized the project for easy deployment.
✔ Automated testing using Pytest to validate model outputs.
✔ GitHub Actions triggered CI/CD workflows, ensuring seamless execution.

Example of Dockerized Workflow:

yaml
Copy
Edit
name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Run tests
        run: pytest --cov=src
🚀 Impact: CI/CD automation reduced manual intervention, ensuring code integrity and rapid deployment.

4️⃣ Running the Analysis
💡 Option 1: Run Using Docker
1️⃣ Install Docker.
2️⃣ Clone the repository.

bash
Copy
Edit
git clone https://github.com/mindy001/BankMarketingPreditions-.git
cd BankMarketingPreditions-
3️⃣ Start the container.

bash
Copy
Edit
docker-compose up
4️⃣ Access JupyterLab for interactive analysis.

💡 Option 2: Run Using Makefile
1️⃣ Clone repository and activate environment.

bash
Copy
Edit
git clone https://github.com/mindy001/BankMarketingPreditions-.git
cd BankMarketingPreditions-
conda env create -f env/environment.yml  
conda activate bankenv
2️⃣ Generate analysis report.

bash
Copy
Edit
make all
3️⃣ Open the generated PDF report.

Key Takeaways & Impact
🚀 Through this project, I gained experience in:
✔ Building scalable ML models – Data preprocessing, feature engineering, model selection.
✔ Data Engineering & Pipelines – Automated workflows using Makefile and Docker.
✔ Machine Learning for Marketing – Class imbalance handling, precision-recall tradeoffs.
✔ CI/CD & Automation – GitHub Actions for testing, deployment, and reproducibility.
✔ Version Control & Collaboration – GitHub repository management, pull requests, team contributions.

🔹 Future Enhancements:
✅ Hyperparameter tuning using GridSearchCV for improved accuracy.
✅ Feature selection analysis to reduce redundant variables.
✅ Deploying an API to allow real-time model inference for banks.

Final Thoughts
This project strengthened my ability to develop end-to-end machine learning solutions for real-world business challenges. By combining ML modeling, automation, and CI/CD, I created a fully scalable, deployable, and interpretable system.

🔗 Check out the full report: Final Report
🔗 GitHub Repository: Bank Marketing Prediction

Would love to connect with others interested in marketing analytics, data-driven decision-making, and AI-powered business solutions! 🚀


## Credit Card Default Prediction Project
links that takes you to the project section of this
link that takes you to the github page

•	Analyzed and preprocessed the Default of Credit Card Clients dataset to predict credit card payment defaults.
•	Implemented decision tree models and hyperparameter tuning to optimize model performance. 
•	GitHub Repository: https://github.ubc.ca/mds-2024-25/DSCI_573_Lab4_hala_fazeeia/tree/main




## The Data Science Starter Kit - Blog
Overview
A beginner-friendly blog designed to help aspiring data scientists get started with fundamental concepts and practical tools.

What I Did:
✔ Authored blog posts covering topics such as Git & version control, data visualization, and statistical analysis.
✔ Developed tutorials and code examples to guide beginners through key data science workflows.
✔ Created a promotional video to increase community engagement and drive traffic to the blog.
✔ Maintained a GitHub repository for code snippets, datasets, and Jupyter notebooks.
✔ Collaborated with peers to expand content and ensure clarity for diverse audiences.

Technologies & Skills Used:
📌 Python | R | Git & Version Control | Data Visualization | Educational Content Creation | Technical Writing



Ongoing & Future Projects
NYPD Arrest Tracker App (Work in Progress)
A dashboard designed for NYC government executives to track and analyze NYPD arrest metrics using real 2023 arrest data.

✔ Developing interactive data visualizations (maps, bar charts, time-series charts) using Plotly and Seaborn.
✔ Designing a user-friendly dashboard with Dash for real-time data exploration.
✔ Implementing filtering options to dynamically analyze crime trends by borough, precinct, and crime type.